
import * as path from "path";
import * as fs from "fs";
import * as Options from "../../options";

export const copyTo = (baseDir: string, overwrite: boolean, skip: boolean, summary: Options.Summary) => { 
  
  if (overwrite || (!fs.existsSync(path.join(baseDir, "/App/Page/Id.elm")) && !skip)) {
    const filepath = path.join(baseDir, "/App/Page/Id.elm");
    fs.mkdirSync(path.dirname(filepath), { recursive: true });
    fs.writeFileSync(filepath, "module App.Page.Id exposing (Id(..))\n\n{-| This is a special file that `elm-prefab` reads when generating the Elm code for wiring up a page.\n\n`elm-prefab` tracks page states in a key/value dictionary that is handled in `./elm-prefab/App.elm`\n\nThe `Id` type belows represents the key for that dictionary.\n\n`elm-prefab` needs every value of `Id` to correspond to an Elm module in `src/Page/*`. It does this by matching up the names.\n\nSo,\n\n    type Id\n        = Home HomeParams\n\nMeans that `elm-prefab` expects to find a module at `src/Page/Home.elm`.\n\nIf you add a new value to `Id` and run `elm-prefab`, then it will create a placeholder page for you!\n\n-}\n\n\ntype Id\n    = Home HomeParams\n    | Package {}\n    | Guide {}\n    | Module {}\n\n\n\n{- Param definitions -}\n\n\ntype alias HomeParams =\n    {}\n");
    const generated = { outputDir: baseDir, path: filepath}
    Options.addGenerated(summary, generated);
  }

  if (overwrite || (!fs.existsSync(path.join(baseDir, "/Page/Guide.elm")) && !skip)) {
    const filepath = path.join(baseDir, "/Page/Guide.elm");
    fs.mkdirSync(path.dirname(filepath), { recursive: true });
    fs.writeFileSync(filepath, "module Page.Guide exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Effect\nimport App.Page\nimport App.Shared\nimport App.Sub\nimport App.View\nimport App.View.Id\nimport Html\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Shared.Shared params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : params -> App.Shared.Shared -> Maybe Model -> App.Page.Init Msg Model\ninit params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Shared.Shared -> Msg -> Model -> ( Model, App.Effect.Effect Msg )\nupdate shared msg model =\n    ( model, App.Effect.none )\n\n\nsubscriptions : App.Shared.Shared -> Model -> App.Sub.Sub Msg\nsubscriptions shared model =\n    App.Sub.none\n\n\nview : App.View.Id.Id -> App.Shared.Shared -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Home\"\n    , body = Html.text \"Home\"\n    }\n");
    const generated = { outputDir: baseDir, path: filepath}
    Options.addGenerated(summary, generated);
  }

  if (overwrite || (!fs.existsSync(path.join(baseDir, "/Page/Module.elm")) && !skip)) {
    const filepath = path.join(baseDir, "/Page/Module.elm");
    fs.mkdirSync(path.dirname(filepath), { recursive: true });
    fs.writeFileSync(filepath, "module Page.Module exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Effect\nimport App.Page\nimport App.Shared\nimport App.Sub\nimport App.View\nimport App.View.Id\nimport Html\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Shared.Shared params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : params -> App.Shared.Shared -> Maybe Model -> App.Page.Init Msg Model\ninit params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Shared.Shared -> Msg -> Model -> ( Model, App.Effect.Effect Msg )\nupdate shared msg model =\n    ( model, App.Effect.none )\n\n\nsubscriptions : App.Shared.Shared -> Model -> App.Sub.Sub Msg\nsubscriptions shared model =\n    App.Sub.none\n\n\nview : App.View.Id.Id -> App.Shared.Shared -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Home\"\n    , body = Html.text \"Home\"\n    }\n");
    const generated = { outputDir: baseDir, path: filepath}
    Options.addGenerated(summary, generated);
  }

  if (overwrite || (!fs.existsSync(path.join(baseDir, "/Page/Package.elm")) && !skip)) {
    const filepath = path.join(baseDir, "/Page/Package.elm");
    fs.mkdirSync(path.dirname(filepath), { recursive: true });
    fs.writeFileSync(filepath, "module Page.Package exposing (page, Model, Msg)\n\n{-|\n\n@docs page, Model, Msg\n\n-}\n\nimport App.Effect\nimport App.Page\nimport App.Shared\nimport App.Sub\nimport App.View\nimport App.View.Id\nimport Html\n\n\n{-| -}\ntype alias Model =\n    {}\n\n\n{-| -}\ntype Msg\n    = ReplaceMe\n\n\npage : App.Page.Page App.Shared.Shared params Msg Model\npage =\n    App.Page.page\n        { init = init\n        , update = update\n        , subscriptions = subscriptions\n        , view = view\n        }\n\n\ninit : params -> App.Shared.Shared -> Maybe Model -> App.Page.Init Msg Model\ninit params shared maybeCached =\n    App.Page.init {}\n\n\nupdate : App.Shared.Shared -> Msg -> Model -> ( Model, App.Effect.Effect Msg )\nupdate shared msg model =\n    ( model, App.Effect.none )\n\n\nsubscriptions : App.Shared.Shared -> Model -> App.Sub.Sub Msg\nsubscriptions shared model =\n    App.Sub.none\n\n\nview : App.View.Id.Id -> App.Shared.Shared -> Model -> App.View.View Msg\nview viewId shared model =\n    { title = \"Home\"\n    , body = Html.text \"Home\"\n    }\n");
    const generated = { outputDir: baseDir, path: filepath}
    Options.addGenerated(summary, generated);
  }

  if (overwrite || (!fs.existsSync(path.join(baseDir, "/Main.elm")) && !skip)) {
    const filepath = path.join(baseDir, "/Main.elm");
    fs.mkdirSync(path.dirname(filepath), { recursive: true });
    fs.writeFileSync(filepath, "module Main exposing (main)\n\n{-| -}\n\nimport App\nimport App.Effect\nimport App.Flags\nimport App.Page.Id\nimport App.Route\nimport App.Shared\nimport App.Sub\nimport App.View\nimport App.View.Id\nimport Browser\nimport Html\nimport Json.Decode\nimport Json.Encode as Json\nimport Url\n\n\ntype alias Model =\n    { shared : App.Shared.Shared\n    , flags : Result Json.Decode.Error App.Flags.Flags\n    }\n\n\n{-| -}\nmain : App.App Model Msg\nmain =\n    App.app\n        { init = init\n        , onUrlChange = UrlChanged\n        , onUrlRequest = UrlRequested\n        , update = update\n        , subscriptions = subscriptions\n        , toCmd = toCmd\n        , toSub = toSub\n        , toShared = .shared\n        , view =\n            \\fromFrameMsg model regions ->\n                case regions.primary of\n                    Nothing ->\n                        { title = \"Nothing\"\n                        , body = [ Html.text \"Nothing\" ]\n                        }\n\n                    Just (App.Loading _) ->\n                        { title = \"Loading\"\n                        , body = [ Html.text \"Loading\" ]\n                        }\n\n                    Just App.NotFound ->\n                        --\n                        { title = \"Not found\"\n                        , body = [ Html.text \"Not found\" ]\n                        }\n\n                    Just (App.Error error) ->\n                        -- error is a type you control that lives at App.Page.Error\n                        { title = \"Not found\"\n                        , body = [ Html.text \"Not found\" ]\n                        }\n\n                    Just (App.View page) ->\n                        view fromFrameMsg model page\n        }\n\n\ninit : Json.Value -> Url.Url -> ( Model, App.Effect.Effect Msg )\ninit flagsValue url =\n    let\n        decodedFlags =\n            App.Flags.decode flagsValue\n\n        initial =\n            App.Route.parse url\n\n        model =\n            { shared =\n                { authenticated =\n                    App.Shared.Unauthenticated\n                }\n            , flags = decodedFlags\n            }\n    in\n    gotoUrl url model App.Effect.none\n\n\n\n{-\n   Subscriptions and Commands\n\n-}\n\n\nsubscriptions : Model -> App.Sub.Sub Msg\nsubscriptions model =\n    App.Sub.none\n\n\ntoSub : App.SubOptions Msg -> Model -> App.Sub.Sub (App.Msg Msg) -> Sub.Sub (App.Msg Msg)\ntoSub options model sub =\n    App.Sub.toSubscription options sub\n\n\ntoCmd : App.CmdOptions Msg -> Model -> App.Effect.Effect (App.Msg Msg) -> Cmd (App.Msg Msg)\ntoCmd options model effect =\n    case model.flags of\n        Err _ ->\n            Cmd.none\n\n        Ok flags ->\n            App.Effect.toCmd options effect\n\n\nview :\n    (Msg -> App.Msg Msg)\n    -> Model\n    -> App.View.View (App.Msg Msg)\n    -> Browser.Document (App.Msg Msg)\nview fromFrameMsg model innerView =\n    { title = innerView.title\n    , body =\n        [ innerView.body\n        ]\n    }\n\n\n\n{-\n   Updates\n-}\n\n\ntype Msg\n    = UrlChanged Url.Url\n    | UrlRequested Browser.UrlRequest\n\n\nupdate : Msg -> Model -> ( Model, App.Effect.Effect Msg )\nupdate msg model =\n    case msg of\n        UrlRequested (Browser.Internal url) ->\n            case App.Route.parse url of\n                Nothing ->\n                    ( model\n                    , App.Effect.none\n                    )\n\n                Just route ->\n                    ( model\n                    , App.Effect.navigateTo route.route\n                    )\n\n        UrlRequested (Browser.External urlStr) ->\n            ( model, App.Effect.pushUrl urlStr )\n\n        UrlChanged url ->\n            gotoUrl url model App.Effect.none\n\n\ngotoUrl : Url.Url -> Model -> App.Effect.Effect Msg -> ( Model, App.Effect.Effect Msg )\ngotoUrl url model eff =\n    case App.Route.parse url of\n        Nothing ->\n            ( model\n            , eff\n            )\n\n        Just route ->\n            gotoRoute route model eff\n\n\ngotoRoute : { isRedirect : Bool, route : App.Route.Route } -> Model -> App.Effect.Effect Msg -> ( Model, App.Effect.Effect Msg )\ngotoRoute { isRedirect, route } model eff =\n    case route of\n        App.Route.Logout params ->\n            ( { model\n                | shared =\n                    { authenticated = App.Shared.Unauthenticated\n                    }\n              }\n            , App.Effect.batch\n                [ App.Effect.replaceUrl \"/\"\n                , eff\n                ]\n            )\n\n        _ ->\n            let\n                pageId =\n                    if routeRequiresAuthentication route && not (App.Shared.isLoggedIn model.shared) then\n                        App.Page.Id.Home {}\n\n                    else\n                        routeToPageId route\n            in\n            ( model\n            , App.Effect.batch\n                [ App.Effect.loadAt App.View.Id.Primary pageId\n                , eff\n                ]\n            )\n\n\nrouteRequiresAuthentication : App.Route.Route -> Bool\nrouteRequiresAuthentication route =\n    True\n\n\nrouteToPageId : App.Route.Route -> App.Page.Id.Id\nrouteToPageId route =\n    case route of\n        App.Route.Home _ ->\n            App.Page.Id.Home {}\n\n        App.Route.Logout _ ->\n            App.Page.Id.Home {}\n\n        App.Route.Login _ ->\n            App.Page.Id.Home {}\n\n        App.Route.Package _ ->\n            App.Page.Id.Package {}\n\n        App.Route.Guide _ ->\n            App.Page.Id.Guide {}\n\n        App.Route.Module _ ->\n            App.Page.Id.Module {}\n");
    const generated = { outputDir: baseDir, path: filepath}
    Options.addGenerated(summary, generated);
  }
}
