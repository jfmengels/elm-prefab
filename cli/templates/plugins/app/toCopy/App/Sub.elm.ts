export default (): string => "port module App.Sub exposing\n    ( none, batch\n    , map, toSubscription\n    , Sub\n    )\n\n{-|\n\n\n# Subscriptions\n\n@docs Subscription\n\n@docs none, batch\n\n@docs map, toSubscription\n\n-}\n\nimport Json.Encode\nimport Platform.Sub\n\n\ntype Sub msg\n    = Sub (Platform.Sub.Sub msg)\n    | Batch (List (Sub msg))\n\n\n{-| -}\nnone : Sub msg\nnone =\n    Sub Platform.Sub.none\n\n\n{-| -}\nbatch : List (Sub msg) -> Sub msg\nbatch =\n    Batch\n\n\n{-| -}\nmap : (a -> b) -> Sub a -> Sub b\nmap func sub =\n    case sub of\n        Sub subscription ->\n            Sub (Platform.Sub.map func subscription)\n\n        Batch subs ->\n            Batch (List.map (map func) subs)\n\n\n{-| -}\ntoSubscription : Sub msg -> Platform.Sub.Sub msg\ntoSubscription sub =\n    case sub of\n        Sub subscription ->\n            subscription\n\n        Batch subs ->\n            Platform.Sub.batch (List.map toSubscription subs)\n\n\nport incoming :\n    ({ tag : String\n     , details : Maybe Json.Encode.Value\n     }\n     -> msg\n    )\n    -> Platform.Sub.Sub msg\n"