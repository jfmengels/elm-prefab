export default (): string => "module App.State exposing\n    ( Cache, init, current, get\n    , insert, setCurrent\n    )\n\n{-|\n\n@docs Cache, init, current, get\n\n#docs setCurrent, insert\n\n-}\n\nimport Dict\n\n\ntype Cache state\n    = Cache\n        { currentKey : Maybe String\n        , current : Maybe state\n        , cache : Dict.Dict String state\n        }\n\n\ninit : Cache state\ninit =\n    Cache\n        { currentKey = Nothing\n        , current = Nothing\n        , cache = Dict.empty\n        }\n\n\ncurrent : Cache state -> Maybe state\ncurrent (Cache details) =\n    details.current\n\n\nsetCurrent : String -> Cache state -> Cache state\nsetCurrent key (Cache details) =\n    Cache\n        { details\n            | currentKey = Just key\n            , current = Dict.get key details.cache\n            , cache =\n                case details.currentKey of\n                    Nothing ->\n                        details.cache\n\n                    Just previousCurrentKey ->\n                        if previousCurrentKey == key then\n                            details.cache\n\n                        else\n                            case details.current of\n                                Nothing ->\n                                    details.cache\n\n                                Just previousCurrent ->\n                                    details.cache\n                                        |> Dict.remove key\n                                        |> Dict.insert previousCurrentKey previousCurrent\n        }\n\n\nget : String -> Cache state -> Maybe state\nget key (Cache details) =\n    case details.currentKey of\n        Nothing ->\n            Dict.get key details.cache\n\n        Just currentKey ->\n            if currentKey == key then\n                details.current\n\n            else\n                Dict.get key details.cache\n\n\ninsert : String -> state -> Cache state -> Cache state\ninsert key value (Cache details) =\n    case details.currentKey of\n        Nothing ->\n            Cache { details | cache = Dict.insert key value details.cache }\n\n        Just currentKey ->\n            if currentKey == key then\n                Cache { details | current = Just value }\n\n            else\n                Cache { details | cache = Dict.insert key value details.cache }\n"