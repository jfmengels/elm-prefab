export default (): string => "module App.Markdown exposing (Model, Msg, Page, page)\n\n{-| -}\n\nimport App\nimport Browser\nimport Html exposing (Html)\nimport Http\nimport Markdown.Block\nimport Markdown.Parser\nimport Markdown.Renderer\nimport Result\n\n\ntype alias Model =\n    { source : { sourceUrl : String }\n    , markdown : Result (List String) (List Markdown.Block.Block)\n    }\n\n\ntype Msg\n    = MarkdownReceived (Result Http.Error String)\n\n\ntype alias Page shared =\n    App.Page { sourceUrl : String } shared Model Msg (Browser.Document Msg)\n\n\npage : String -> Page shared\npage markdown =\n    App.page\n        { init =\n            \\params shared ->\n                ( { source = params\n                  , markdown =\n                        Markdown.Parser.parse markdown\n                            |> Result.mapError (List.map Markdown.Parser.deadEndToString)\n                  }\n                , App.get\n                    { url = params.sourceUrl\n                    , expect =\n                        Http.expectString MarkdownReceived\n                    }\n                )\n        , update = update\n        , subscriptions = \\pageUnpack unpack -> App.Subscription Sub.none\n        , view =\n            \\model ->\n                { title = \"test\"\n                , body =\n                    case model.markdown of\n                        Ok parsed ->\n                            case\n                                Markdown.Renderer.render\n                                    Markdown.Renderer.defaultHtmlRenderer\n                                    parsed\n                            of\n                                Ok rendered ->\n                                    rendered\n\n                                Err errorText ->\n                                    [ Html.text errorText ]\n\n                        Err parsingErrors ->\n                            [ Html.text \"Error parsing\" ]\n                }\n        }\n\n\nupdate msg model =\n    case msg of\n        MarkdownReceived (Err err) ->\n            ( model, App.none )\n\n        MarkdownReceived (Ok markdown) ->\n            ( { model\n                | markdown =\n                    Markdown.Parser.parse markdown\n                        |> Result.mapError (List.map Markdown.Parser.deadEndToString)\n              }\n            , App.none\n            )\n"